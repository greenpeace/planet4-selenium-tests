<?php

//This class is needed to start the session and open/close the browser
require_once __DIR__ . '/../wp-core/login.php';

class P4_Posts extends P4_login {

  /**
   * @var \RemoteWebDriver
   */


  public function testPosts()
  {

  	$post_title = "Test automated â€“ Post";
  	$description = "This is demo content generated by an automated test";
  	//Verify if user is already logged in
  	$this->webDriver->getTitle();
   	//I log in

	try{
   		$this->wpLogin();
	}catch(Exception $e){
		$this->fail('->Failed to log in, verify credentials and URL');
	}

	//Go to pages to create content  
   	$this->webDriver->wait(3);
	$pages = $this->webDriver->findElement(
	WebDriverBy::id("menu-posts"));
	$pages->click();
	try{
		$link = $this->webDriver->findElement(
		WebDriverBy::linkText("Add New"));
	}catch(Exception $e){
		$this->fail("->Could not find 'Add New' button in Pages overview");
    }
	$link->click();

	//Validate button to add Blocks to page is present
	$this->assertContains(
		'Add Post Element',$this->webDriver->findElement(
		WebDriverBy::className('shortcake-add-post-element'))->getText());

	//Enter title
	$field	= $this->webDriver->findElement(
	WebDriverBy::id('title-prompt-text')
	);
	$field->click();
	$this->webDriver->getKeyboard()->sendKeys($post_title);

	//Click on Add Post Element button to view blocks
	$add = $this->webDriver->findElement(
	WebDriverBy::className("shortcake-add-post-element")
	);
	$add->click();
	//Validate blocks modal window is opened
	$this->assertContains(
	'Insert Post Element',$this->webDriver->findElement(
	WebDriverBy::className('media-frame-title'))->getText()
	);
	//Validate all blocks are present
	try{
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_articles']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_campaign_thumbnail']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_carousel']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_carousel_header']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_carousel_split']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_content_four_column']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_happy_point']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_media_block']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_split_two_columns']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_static_four_column']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_subheader']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_take_action_boxout']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_covers']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_tasks']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_content_three_column']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_two_columns']"));
		$this->webDriver->findElement(WebDriverBy::cssSelector("li[data-shortcode='shortcake_media_video']"));
	}catch(Exception $e){
		$this->fail("->At least one block is missing in posts page");
	}
	$close = $this->webDriver->findElement(WebDriverBy::className("media-modal-close"));
	$close->click();
	//Enter description
	try{
		$this->webDriver->findElement(WebDriverBy::id("content-html"))->click();
		$this->webDriver->findElement(WebDriverBy::id("content"))->click();
		$this->webDriver->getKeyboard()->sendKeys($description);
		$this->webDriver->switchTo()->defaultContent();
	}catch(Exception $e){
		$this->fail("->Failed to enter post description");
	}
		
	//Add image
	try{
		$this->webDriver->findElement(WebDriverBy::id("insert-media-button"))->click();
		$this->webDriver->findElement(WebDriverBy::className("media-modal-content"));
		$this->webDriver->findElement(WebDriverBy::id("media-attachment-filters"))->click();
		$this->webDriver->findElement(WebDriverBy::cssSelector("option[value='image']"))->click();
		//Wait for media library to load
		$this->webDriver->wait(10, 1000)->until(
			WebDriverExpectedCondition::presenceOfElementLocated(
			WebDriverBy::cssSelector('ul.attachments')));
		$this->webDriver->manage()->timeouts()->implicitlyWait(10);
		$srcfirstchild = $this->webDriver->findElement(
			WebDriverBy::cssSelector("li.attachment:first-child img"))->getAttribute('src');
		$this->webDriver->findElement(WebDriverBy::cssSelector("li.attachment:first-child"))->click();
		$this->webDriver->findElement(WebDriverBy::className("media-button-insert"))->click();
	}catch(Exception $e){
		$this->fail("->Failed to add image");
	}
	//Wait for content to load
	usleep(1000000);

	try{
		$this->webDriver->findElement(WebDriverBy::name("p4-page-type"))->click();
		$this->webDriver->findElement(WebDriverBy::cssSelector("option[value='story']"))->click();
	}catch(Exception $e){
		$this->fail("->Failed to select page type");
	}

	//Publish content
	$this->webDriver->findElement(
	WebDriverBy::id('publish')
	)->click();
	//Wait for content to load
	usleep(2000000);

	try{
		//Validate I see successful message
		$this->assertContains(
		'Post published',$this->webDriver->findElement(
		WebDriverBy::id('message'))->getText()
		);
	}catch(Exception $e){
		$this->fail('->Failed to publish content - no sucessful message after saving content');
        }

    //Wait for saved changes to load
	usleep(2000000);
	//Go to page to validate page contains content added
	$link = $this->webDriver->findElement(
	WebDriverBy::linkText('View post')
	);	
	$link->click();
	//If alert shows up asking to confirm leaving the page, confirm
	try{
		$this->webDriver->switchTo()->alert()->accept();
	}catch(Exception $e){}

	//Validate elements are present
	
	try{
		$type = $this->webDriver->findElement(WebDriverBy::cssSelector(".page-header .top-page-tags a.tag-item--main"))->getText();
		$title_pg = $this->webDriver->findElement(WebDriverBy::className("page-header-title"))->getText();
		$this->webDriver->findElement(WebDriverBy::className("post-content"));
		$desc_pg = $this->webDriver->findElement(
			WebDriverBy::cssSelector(".post-content-lead article.post-details p"))->getText();
		$srcimg_pg = $this->webDriver->findElement(
			WebDriverBy::cssSelector(".post-content-lead article.post-details img"))->getAttribute('src');
	}catch(Exception $e){
		$this->fail('->Failed to see some of the created content on front end page');
	}

	$this->assertEquals("$post_title", "$title_pg");
	$this->assertEquals("$description", "$desc_pg");
	$this->assertContains("$srcfirstchild", "$srcimg_pg");


	// I log out after test
	$this->wpLogout();
	echo "\n-> Posts test PASSED";
  }


  protected function assertElementNotFound($by)
  {
	$this->webDriver->takeScreenshot('reports/screenshots/'.__CLASS__.'.png');
	$els = $this->webDriver->findElements($by);
	if (count($els)) {
		$this->fail("Unexpectedly element was found");
	}
	// increment assertion counter
	$this->assertTrue(true);

  }

}
?>
