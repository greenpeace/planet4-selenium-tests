<?php

use Facebook\WebDriver\WebDriverBy;
use Facebook\WebDriver\WebDriverExpectedCondition;

class P4_Header extends P4_login {

	/**
	 * @var \RemoteWebDriver
	 */
	public function testHeader() {

		//I log in
		try {
			$this->wpLogin();
		} catch ( Exception $e ) {
			$this->fail( '->Failed to log in, verify credentials and URL' );
		}

		//Go to pages and create content
		$this->driver->wait( 3 );
		$pages = $this->driver->findElement(
			WebDriverBy::id( "menu-pages" ) );
		$pages->click();
		try {
			$link = $this->driver->findElement(
				WebDriverBy::linkText( "Add New" )
			);
		} catch ( Exception $e ) {
			$this->fail( "->Could not find 'Add New' button in Pages overview" );
		}
		$link->click();

		//Validate button to add blocks to page is present
		$this->assertContains(
			'Add Page Element', $this->driver->findElement(
			WebDriverBy::className( 'shortcake-add-post-element' ) )->getText()
		);


		//Enter title of page
		$field = $this->driver->findElement(
			WebDriverBy::id( 'title-prompt-text' )
		);
		$field->click();
		$this->driver->getKeyboard()->sendKeys( 'Test automated - Header' );

		//Validate corresponding block fields are present
		try {
			$this->driver->findElement( WebDriverBy::id( "p4_title" ) );
			$this->driver->findElement( WebDriverBy::id( "p4_subtitle" ) );
			$this->driver->findElement( WebDriverBy::cssSelector( "div[data-fieldtype='wysiwyg']" ) );
			$this->driver->findElement( WebDriverBy::id( "p4_button_title" ) );
			$this->driver->findElement( WebDriverBy::id( "p4_button_link" ) );
			$this->driver->findElement( WebDriverBy::cssSelector( "input[value='Add Background Image']" ) );
		} catch ( Exception $e ) {
			$this->fail( "->Fields corresponding to 'Header' block not found" );
		}

		//Fill in fields
		$titl    = 'Test Header';
		$subtitl = 'This is a test subtitle';
		$desc    = 'This is a test description generated by an automated tests to test header block';
		$blink   = 'Test button';
		$burl    = 'http://www.greenpeace.org';
		$fld     = $this->driver->findElement( WebDriverBy::id( "p4_title" ) );
		$fld->click();
		$this->driver->getKeyboard()->sendKeys( "$titl" );
		$this->driver->findElement( WebDriverBy::id( "p4_subtitle" ) )->click();
		$this->driver->getKeyboard()->sendKeys( "$subtitl" );
		$this->driver->findElement( WebDriverBy::className( "cmb2-id-p4-description" ) );
		$this->driver->findElement(
			WebDriverBy::cssSelector( "div[data-fieldtype='wysiwyg']" ) )->click();
		$this->driver->getKeyboard()->sendKeys( "$desc" );
		$this->driver->findElement( WebDriverBy::id( "p4_button_title" ) )->click();
		$this->driver->getKeyboard()->sendKeys( "$blink" );
		$this->driver->findElement( WebDriverBy::id( "p4_button_link" ) )->click();
		$this->driver->getKeyboard()->sendKeys( "$burl" );
		//Upload image
		$this->driver->findElement( WebDriverBy::cssSelector( "input[value='Add Background Image']" ) )->click();
		$this->driver->findElement( WebDriverBy::linkText( 'Media Library' ) )->click();
		//Wait for media library to load
		$this->driver->wait( 10, 1000 )->until(
			WebDriverExpectedCondition::presenceOfElementLocated(
				WebDriverBy::cssSelector( 'ul.attachments' ) ) );
		$this->driver->manage()->timeouts()->implicitlyWait( 10 );
		//Select first image of media library
		$srcfirstchild = explode( "-", $this->driver->findElement(
			WebDriverBy::cssSelector( "li.attachment:first-child img" ) )->getAttribute( 'src' ) );
		$srcfirstchild = $srcfirstchild[1];
		$this->driver->findElement( WebDriverBy::cssSelector( "li.attachment:first-child" ) )->click();
		$this->driver->findElement( WebDriverBy::className( "media-button-select" ) )->click();

		//Scroll to top of page
		$this->driver->executeScript( 'window.scrollTo(0,0);' );
		//Publish content
		$btn = $this->driver->findElement(
			WebDriverBy::id( 'publish' ) );
		$btn->click();

		//Wait to see successful message
		$this->driver->wait( 10, 1000 )->until(
			WebDriverExpectedCondition::visibilityOfElementLocated(
				WebDriverBy::id( 'message' ) ) );
		//Validate I see successful message
		try {
			$this->assertContains(
				'Page published', $this->driver->findElement(
				WebDriverBy::id( 'message' ) )->getText()
			);
		} catch ( Exception $e ) {
			$this->fail( '->Failed to publish content - no sucessful message after saving content' );
		}
		//Wait for saved changes to load
		usleep( 2000000 );
		//Go to page to validate page contains added block
		$link = $this->driver->findElement(
			WebDriverBy::linkText( 'View page' ) );
		$link->click();
		//If alert shows up asking to confirm leaving the page, confirm
		try {
			$this->driver->switchTo()->alert()->accept();
		} catch ( Exception $e ) {
		}
		//Validate Block contains corresponding classes and content
		try {
			$this->driver->findElement( WebDriverBy::className( 'page-header' ) );
			$titl_pg    = $this->driver->findElement(
				WebDriverBy::cssSelector( '.page-header h1' ) )->getText();
			$subtitl_pg = $this->driver->findElement(
				WebDriverBy::cssSelector( '.page-header h3' ) )->getText();
			$desc_pg    = $this->driver->findElement(
				WebDriverBy::cssSelector( '.page-header p' ) )->getText();
			$blink_pg   = $this->driver->findElement(
				WebDriverBy::cssSelector( '.page-header .col-md-4 a' ) )->getText();
			$burl_pg    = $this->driver->findElement(
				WebDriverBy::cssSelector( '.page-header .col-md-4 a' ) )->getAttribute( 'href' );
			$srcimg     = explode( "-", $this->driver->findElement(
				WebDriverBy::className( 'page-header-image' ) )->getAttribute( 'src' ) );
			$srcimg     = $srcimg[1];
		} catch ( Exception $e ) {
			$this->fail( '->Some of the content created is not displayed in front end page' );
		}
		$this->assertEquals( $titl, $titl_pg );
		$this->assertEquals( $subtitl, $subtitl_pg );
		$this->assertEquals( $desc, $desc_pg );
		$this->assertEquals( strtoupper( $blink ), $blink_pg );
		$this->assertContains( $burl, $burl_pg );
		$this->assertContains( $srcimg, $srcfirstchild );

		echo "\n-> Header block test PASSED";
	}
}
