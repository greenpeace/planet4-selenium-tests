<?php

//This class is needed to start the session and open/close the browser
require_once __DIR__ . '/../wp-core/login.php';

use WebDriverBy as By;

class P4_Split_TwoColumns extends P4_login {

	use P4_Functions;

	/**
	 *
	 * @var \RemoteWebDriver
	 */
	public function testSplitTwoColumns() {

		$this->create_new_page();

		//Validate button to add blocks to page is present
		$this->assertContains(
			'Add Page Element', $this->driver->findElement(
			By::className( 'shortcake-add-post-element' ) )->getText()
		);

		//Enter title of page
		$field = $this->driver->findElement(
			By::id( 'title-prompt-text' )
		);
		$field->click();
		$this->driver->getKeyboard()->sendKeys( 'Test automated - Split Two Column' );

		//Click on button to add blocks
		$add = $this->driver->findElement(
			By::className( "shortcake-add-post-element" )
		);
		$add->click();

		//Validate blocks modal window is shown
		$this->assertContains(
			'Insert Post Element', $this->driver->findElement(
			By::className( 'media-frame-title' ) )->getText()
		);

		//Select Split Two Columns block
		try {
			$ta = $this->driver->findElement(
				By::cssSelector( "li[data-shortcode='shortcake_split_two_columns']" ) );
			$ta->click();
			usleep( 2000000 );
		} catch ( Exception $e ) {
			$this->fail( "->Failed to select 'Split Two Column' post element" );
		}

		//Validate elements are present
		try {
			$this->driver->findElement( By::name( "select_issue" ) );
			$this->driver->findElement( By::name( "title" ) );
			$this->driver->findElement( By::name( "issue_description" ) );
			$this->driver->findElement( By::name( "button_text" ) );
			$this->driver->findElement( By::name( "button_link" ) );
			$this->driver->findElement( By::id( "issue_image" ) );
			$this->driver->findElement( By::name( "focus_issue_image" ) );
			$this->driver->findElement( By::name( "select_tag" ) );
			$this->driver->findElement( By::name( "tag_description" ) );
		} catch ( Exception $e ) {
			$this->fail( "->Fields corresponding to 'Split Two Columns' block not found" );
		}

		//Fill in fields
		$titl  = "Test title";
		$desc  = 'This is test content generated by an automatic test';
		$field = $this->driver->findElement(
			By::name( "select_issue" )
		);
		$field->click();
		$issue = strtolower( $this->driver->findElement( By::xPath( "//*[@name='select_issue']/option[2]" ) )->getText() );
		$this->driver->findElement( By::xPath( "//*[@name='select_issue']/option[2]" ) )->click();
		$field = $this->driver->findElement(
			By::name( "title" ) );
		$field->click();
		$this->driver->getKeyboard()->sendKeys( "$titl" );
		$field = $this->driver->findElement(
			By::name( 'issue_description' ) );
		$field->click();
		$this->driver->getKeyboard()->sendKeys( "$desc" );
		$field = $this->driver->findElement(
			By::name( 'select_tag' ) );
		$field->click();
		$tg = $this->driver->findElement( By::xpath( "//select[@name='select_tag']/option[normalize-space(text())='ArcticSunrise']" ) )->getText();
		$this->driver->findElement( By::xpath( "//select[@name='select_tag']/option[text()='ArcticSunrise']" ) )->click();

		//Insert block
		try {
			$insert = $this->driver->findElement(
				By::className( 'media-button-insert' )
			);
			$insert->click();
		} catch ( Exception $e ) {
			$this->fail( '->Failed to insert element' );
		}

		//Publish content
		$this->driver->findElement(
			By::id( 'publish' )
		)->click();

		//Wait to see successful message
		$this->driver->wait( 10, 1000 )->until(
			WebDriverExpectedCondition::visibilityOfElementLocated(
				By::id( 'message' ) ) );
		//Validate I see successful message
		try {
			$this->assertContains(
				'Page published', $this->driver->findElement(
				By::id( 'message' ) )->getText()
			);
		} catch ( Exception $e ) {
			$this->fail( '->Failed to publish content - no sucessful message after saving content' );
		}
		//Wait for saved changes to load
		usleep( 2000000 );
		//Go to page to validate page contains added block
		$link = $this->driver->findElement(
			By::linkText( 'View page' )
		);
		$link->click();

		//If alert shows up asking to confirm leaving the page, confirm
		try {
			$this->driver->switchTo()->alert()->accept();
		} catch ( Exception $e ) {
		}
		try {
			$this->driver->findElement( By::className( 'split-two-column' ) );
			$issue_pg = strtolower( $this->driver->findElement(
				By::cssSelector( '.split-two-column-item.item--left .split-two-column-item-content a' ) )->getAttribute( 'href' ) );
			$titl_pg  = $this->driver->findElement(
				By::cssSelector( '.split-two-column-item.item--left h2.split-two-column-item-title' ) )->getText();
			$desc_pg  = $this->driver->findElement(
				By::cssSelector( '.split-two-column-item.item--left p.split-two-column-item-subtitle' ) )->getText();
			$subtg    = explode( "#", $this->driver->findElement(
				By::cssSelector( '.split-two-column-item.item--right a.split-two-column-item-tag' ) )->getText() );
			$btn_pg   = $this->driver->findElement(
				By::cssSelector( '.split-two-column-item.item--right a.split-two-column-item-button' ) )->getText();
		} catch ( Exception $e ) {
			$this->fail( '->Some of the content created is not displayed in front end page' );
		}
		$this->assertContains( $issue, $issue_pg );
		$this->assertEquals( $titl, $titl_pg );
		$this->assertEquals( $tg, $subtg[1] );
		$this->assertEquals( $desc, $desc_pg );
		$this->assertEquals( 'GET INVOLVED', $btn_pg );

		echo "\n-> Split two column block test PASSED";
	}
}
