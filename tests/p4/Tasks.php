<?php

//This class is needed to start the session and open/close the browser
require_once __DIR__ . '/../wp-core/login.php';

use WebDriverBy as By;

class P4_Tasks extends P4_login {

	use P4_Functions;

	/**
	 * @var \RemoteWebDriver
	 */
	public function testTasks() {

		$this->create_new_page();

		//Validate button to add blocks to page is present
		$this->assertContains(
			'Add Page Element', $this->driver->findElement(
			By::className( 'shortcake-add-post-element' ) )->getText()
		);


		//Enter title of page
		$field = $this->driver->findElement(
			By::id( 'title-prompt-text' )
		);
		$field->click();
		$this->driver->getKeyboard()->sendKeys( 'Test automated - Take Action tasks' );

		//Click on button to add blocks
		$add = $this->driver->findElement(
			By::className( "shortcake-add-post-element" )
		);
		$add->click();

		//Validate blocks modal window is shown
		$this->assertContains(
			'Insert Post Element', $this->driver->findElement(
			By::className( 'media-frame-title' ) )->getText()
		);

		//Select TakeAction block
		try {
			$ta = $this->driver->findElement(
				By::cssSelector( "li[data-shortcode='shortcake_tasks']" )
			);
			$ta->click();
		} catch ( Exception $e ) {
			$this->fail( "->Failed to select 'Take Action Tasks' post element" );
		}

		//Validate tasks fields are visible, all four sets of them.
		try {

			for ($i=1; $i<5; $i++) {

			//Fields task.
			$this->driver->findElement( By::name( "title_$i" ) );
			$this->driver->findElement( By::name( "description_$i" ) );
			$this->driver->findElement( By::id( "attachment_$i" ) );
			$this->driver->findElement( By::name( "button_text_$i" ) );
			$this->driver->findElement( By::name( "button_link_$i" ) );
			}
		} catch ( Exception $e ) {
			$this->fail( "->Could not find tasks fields for 'Take Action Tasks' post element" );
		}

		//---- Fill in title and description
		$ttitle = 'Take Action Tasks Test';
		$tdesc  = 'This is content created by an automated test for testing take action tasks block';
		$field  = $this->driver->findElement(
			By::name( 'tasks_title' )
		);
		$field->click();
		$this->driver->getKeyboard()->sendKeys( "$ttitle" );

		$field = $this->driver->findElement(
			By::name( 'tasks_description' )
		);
		$field->click();
		$this->driver->getKeyboard()->sendKeys( "$tdesc" );

		//--- FILL IN FIELDS FOR TASK 1
		$title1 = 'Test Task 1';
		$desc1  = 'This is the content for task 1 which is generated by an automated test';
		$field  = $this->driver->findElement(
			By::name( 'title_1' )
		);
		$field->click();
		$this->driver->getKeyboard()->sendKeys( "$title1" );
		$field = $this->driver->findElement(
			By::name( 'description_1' )
		);
		$field->click();
		$this->driver->getKeyboard()->sendKeys( "$desc1" );
		$this->driver->findElement( By::id( "attachment_1" ) )->click();
		$tab = $this->driver->findElement( By::linkText( 'Media Library' ) );
		$tab->click();
		//Wait for media library to load
		$this->driver->wait( 10, 1000 )->until(
			WebDriverExpectedCondition::presenceOfElementLocated(
				By::cssSelector( 'ul.attachments' ) )
		);
		$this->driver->manage()->timeouts()->implicitlyWait( 10 );
		//Select first image
		$srcfirstchild = explode( "-", $this->driver->findElement(
			By::cssSelector( "li.attachment:first-child img" ) )->getAttribute( 'src' ) );
		$srcfirstchild = $srcfirstchild[1];
		$img           = $this->driver->findElement( By::cssSelector( "li.attachment:first-child" ) );
		$img->click();
		//Get info needed to upload image 2
		$img2      = $this->driver->findElement(
			By::cssSelector( "li.attachment:nth-child(2)" ) )->getAttribute( 'data-id' );
		$src2child = explode( "-", $this->driver->findElement(
			By::cssSelector( "li.attachment:nth-child(2) img" ) )->getAttribute( 'src' ) );
		$src2child = $src2child[1];
		$this->driver->findElement( By::className( "media-button-select" ) )->click();

		//--- FILL IN FIELDS FOR TASK 2
		$title2 = 'Test Task 2';
		$desc2  = 'This is the content for task 2 which is generated by an automated test';
		$field  = $this->driver->findElement(
			By::name( 'title_2' )
		);
		$field->click();
		$this->driver->getKeyboard()->sendKeys( "$title2" );
		$field = $this->driver->findElement(
			By::name( 'description_2' )
		);
		$field->click();
		$this->driver->getKeyboard()->sendKeys( "$desc2" );

		//Insert block
		try {
			$insert = $this->driver->findElement(
				By::className( 'media-button-insert' )
			);
			$insert->click();
		} catch ( Exception $e ) {
			$this->fail( '->Failed to insert element' );
		}

		//Edit WYSIWYG text to add image 2
		$this->driver->findElement( By::id( "content-html" ) )->click();
		$this->driver->findElement( By::id( "content" ) )->click();
		$this->driver->getKeyboard()->pressKey( WebDriverKeys::ARROW_RIGHT );
		$this->driver->getKeyboard()->pressKey( WebDriverKeys::BACKSPACE );
		$this->driver->getKeyboard()->pressKey( WebDriverKeys::BACKSPACE );
		$this->driver->getKeyboard()->sendKeys( "attachment_2=$img2 /]" );

		//Publish content
		$this->driver->findElement( By::id( 'publish' ) )->click();

		//Wait to see successful message
		$this->driver->wait( 10, 1000 )->until(
			WebDriverExpectedCondition::visibilityOfElementLocated(
				By::id( 'message' ) ) );
		//Validate I see successful message
		try {
			$this->assertContains(
				'Page published', $this->driver->findElement(
				By::id( 'message' ) )->getText()
			);
		} catch ( Exception $e ) {
			$this->fail( '->Failed to publish content - no sucessful message after saving content' );
		}
		//Wait for saved changes to load
		usleep( 2000000 );
		//Go to page to validate page contains added block
		$link = $this->driver->findElement(
			By::linkText( 'View page' ) );
		$link->click();
		//If alert shows up asking to confirm leaving the page, confirm
		try {
			$this->driver->switchTo()->alert()->accept();
		} catch ( Exception $e ) {
		}
		try {
			$this->driver->findElement( By::id( 'p4bks_tasks_container' ) );
			$ttitle_pg = $this->driver->findElement(
				By::cssSelector( '#p4bks_tasks_container .container h3' ) )->getText();
			$tdesc_pg  = $this->driver->findElement(
				By::cssSelector( '#p4bks_tasks_container .container div.col-md-12' ) )->getText();
			$task1     = $this->driver->findElement(
				By::cssSelector( '.col:nth-child(1) .step-number' ) )->getText();
			$tmp       = explode( "-", $this->driver->findElement(
				By::cssSelector( 'div.col:nth-child(1) img' ) )->getAttribute( 'src' ) );
			$srcimg    = $tmp[1];
			$title1_pg = $this->driver->findElement(
				By::cssSelector( 'div.step-info div.row:nth-child(1) div.col:nth-child(1) h5' ) )->getText();
			$desc1_pg  = $this->driver->findElement(
				By::cssSelector( 'div.step-info div.row:nth-child(2) div.col:nth-child(1) p' ) )->getText();
			$task2     = $this->driver->findElement(
				By::cssSelector( '.col:nth-child(2) .step-number' ) )->getText();
			$srcimg2   = explode( "-", $this->driver->findElement(
				By::cssSelector( 'div.col:nth-child(2) img' ) )->getAttribute( 'src' ) );
			$srcimg2   = $srcimg2[1];
			$title2_pg = $this->driver->findElement(
				By::cssSelector( 'div.step-info div.row:nth-child(1) div.col:nth-child(2) h5' ) )->getText();
			$desc2_pg  = $this->driver->findElement(
				By::cssSelector( 'div.step-info div.row:nth-child(2) div.col:nth-child(2) p' ) )->getText();
		} catch ( Exception $e ) {
			$this->fail( $e->getMessage() );
			$this->fail( '->Some of the content created is not displayed in front end page' );
		}
		$this->assertEquals( "$ttitle", "$ttitle_pg" );
		$this->assertEquals( "$tdesc", "$tdesc_pg" );
		$this->assertEquals( "1", "$task1" );
		$this->assertContains( "$srcimg", "$srcfirstchild" );
		$this->assertEquals( "$title1", "$title1_pg" );
		$this->assertEquals( "$desc1", "$desc1_pg" );
		$this->assertEquals( "2", "$task2" );
		$this->assertContains( "$srcimg2", "$src2child" );
		$this->assertEquals( "$title2", "$title2_pg" );
		$this->assertEquals( "$desc2", "$desc2_pg" );

		echo "\n-> Tasks block test PASSED";
	}
}
